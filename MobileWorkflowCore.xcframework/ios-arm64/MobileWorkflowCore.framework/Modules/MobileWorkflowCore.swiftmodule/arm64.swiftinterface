// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MobileWorkflowCore
import AVFoundation
import AVKit
import Combine
import CoreLocation
import CryptoKit
import Foundation
import MediaPlayer
import MessageUI
@_exported import MobileWorkflowCore
import ResearchKit.Private
import ResearchKit
import Security
import Swift
import UIKit
import VisionKit
public typealias Response<T> = (Swift.Result<T, Swift.Error>) -> Swift.Void
@_hasMissingDesignatedInitializers final public class NetworkManager {
  final public func postSession(to url: Swift.String, queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
  final public func request<T>(url: Swift.String, httpMethod: MobileWorkflowCore.HTTPMethod = .get, queue: Dispatch.DispatchQueue = .main, type: T.Type, completion: @escaping (Swift.Result<T, Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  final public func request<T>(url: Swift.String, httpMethod: MobileWorkflowCore.HTTPMethod = .get, queue: Dispatch.DispatchQueue = .main, parse: @escaping (Foundation.Data) throws -> T, completion: @escaping (Swift.Result<T, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public enum ParseError : Foundation.LocalizedError, Swift.CustomStringConvertible {
  case invalidStepData(cause: Swift.String)
  case invalidWorkflowData(cause: Swift.String)
  case invalidServerData(cause: Swift.String)
  case invalidAppName(cause: Swift.String)
  case invalidAppData(cause: Swift.String)
  case invalidNavigationStyle(cause: Swift.String)
  case invalidNavigationRule(cause: Swift.String)
  public var domain: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var description: Swift.String {
    get
  }
}
public protocol URLSchemeManager {
  func parse(url: Foundation.URL) -> MobileWorkflowCore.AppConfigurationContext?
}
public struct MobileWorkflowSchemeManager : MobileWorkflowCore.URLSchemeManager {
  public init(version: Swift.String = "v1", debugHost: Swift.String = "localhost", defaultPort: Swift.Int = 5000)
  public func parse(url: Foundation.URL) -> MobileWorkflowCore.AppConfigurationContext?
}
#warning("Remove")
public struct NexaLawURLSchemeManager : MobileWorkflowCore.URLSchemeManager {
  public let filePath: Swift.String
  public let serverId: Swift.Int
  public init(filePath: Swift.String, serverId: Swift.Int)
  public func parse(url: Foundation.URL) -> MobileWorkflowCore.AppConfigurationContext?
}
extension UIViewController {
  public func addCovering(childViewController: UIKit.UIViewController)
}
public protocol BuildableStep : ResearchKit.ORKStep {
  static func build(data: MobileWorkflowCore.StepData, context: MobileWorkflowCore.StepContext, networkManager: MobileWorkflowCore.NetworkManager, imageLoader: MobileWorkflowCore.ImageLoader, localizationManager: MobileWorkflowCore.Localization) throws -> ResearchKit.ORKStep
}
@objc @_inheritsConvenienceInitializers public class MobileWorkflowButtonViewController : ResearchKit.ORKStepViewController {
  public func configureWithTitle(_ title: Swift.String, body: Swift.String, buttonTitle: Swift.String, buttonAction: @escaping (() -> Swift.Void))
  @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
  @objc override dynamic public init(step: ResearchKit.ORKStep?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct Credential : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension ORKQuestionResult : MobileWorkflowCore.ValueProvider {
  public var content: [Swift.AnyHashable : Swift.Codable] {
    get
  }
  public func fetchProvider(for path: Swift.String) -> MobileWorkflowCore.ValueProvider?
  public func fetchValue(for path: Swift.String) -> Any?
}
public protocol SessionProvider {
}
@_hasMissingDesignatedInitializers public class AppConfigurationManager {
  convenience public init(withPlugins plugins: [MobileWorkflowCore.MobileWorkflowPlugin.Type], authRedirectHandler: MobileWorkflowCore.AuthRedirectHandler? = nil)
  @objc deinit
}
public protocol ImageLoader {
  func syncLoad(image: Swift.String) -> UIKit.UIImage?
  func asyncLoad(image: Swift.String, completion: ((UIKit.UIImage?) -> Swift.Void)?) -> Combine.AnyCancellable?
}
@objc @_hasMissingDesignatedInitializers public class MobileWorkflowRootViewController : UIKit.UIViewController, ResearchKit.ORKTaskViewControllerDelegate {
  public init(manager: MobileWorkflowCore.AppConfigurationManager, preferredConfigurations: [MobileWorkflowCore.AppConfigurationContext] = [])
  @objc override dynamic public func viewDidLoad()
  public func loadAppConfiguration(_ context: MobileWorkflowCore.AppConfigurationContext)
  @objc public func taskViewController(_ taskViewController: ResearchKit.ORKTaskViewController, didFinishWith reason: ResearchKit.ORKTaskViewControllerFinishReason, error: Swift.Error?)
  @objc public func taskViewController(_ taskViewController: ResearchKit.ORKTaskViewController, stepViewControllerWillAppear stepViewController: ResearchKit.ORKStepViewController)
  @objc public func taskViewController(_ taskViewController: ResearchKit.ORKTaskViewController, stepViewControllerWillDisappear stepViewController: ResearchKit.ORKStepViewController, navigationDirection direction: ResearchKit.ORKStepViewControllerNavigationDirection)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
public enum HTTPMethod : Swift.String {
  case get
  case head
  case post
  case put
  case delete
  case connect
  case options
  case trace
  case patch
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public protocol MobileWorkflowPlugin {
  static var allStepsTypes: [MobileWorkflowCore.MobileWorkflowStepType] { get }
}
public protocol MobileWorkflowStepType : MobileWorkflowCore.StepType {
  var stepClass: MobileWorkflowCore.MobileWorkflowStep.Type { get }
}
public protocol MobileWorkflowStep : MobileWorkflowCore.BuildableStep {
}
public protocol StepType {
  var typeName: Swift.String { get }
}
public struct StepContext {
}
public struct StepData : Swift.Codable {
  public let type: Swift.String
  public let identifier: Swift.String
  public let image: UIKit.UIImage?
  public let imageURL: Swift.String?
  public let content: [Swift.String : Any]
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension ORKImageCaptureStep : MobileWorkflowCore.MobileWorkflowStep {
  public static func build(data: MobileWorkflowCore.StepData, context: MobileWorkflowCore.StepContext, networkManager: MobileWorkflowCore.NetworkManager, imageLoader: MobileWorkflowCore.ImageLoader, localizationManager: MobileWorkflowCore.Localization) throws -> ResearchKit.ORKStep
}
public enum AppConfigurationContext {
  case remote(url: Swift.String, serverId: Swift.Int?)
  case cached
  case file(path: Swift.String, serverId: Swift.Int?, workflowId: Swift.Int?, sessionValues: [Swift.String : Any]? = nil)
}
extension Collection where Self.Element == MobileWorkflowCore.URLSchemeManager {
  public func firstValidConfiguration(from urlContexts: Swift.Set<UIKit.UIOpenURLContext>) -> MobileWorkflowCore.AppConfigurationContext?
}
@_hasMissingDesignatedInitializers final public class Localization {
  final public func translate(_ stringToTranslate: Swift.String?) -> Swift.String?
  @objc deinit
}
public protocol ValueProvider : MobileWorkflowCore.SessionProvider {
  var content: [Swift.AnyHashable : Swift.Codable] { get }
  func fetchValue(for path: Swift.String) -> Any?
  func fetchProvider(for path: Swift.String) -> MobileWorkflowCore.ValueProvider?
}
extension String : MobileWorkflowCore.ValueProvider {
  public var content: [Swift.AnyHashable : Swift.Codable] {
    get
  }
  public func fetchValue(for path: Swift.String) -> Any?
  public func fetchProvider(for path: Swift.String) -> MobileWorkflowCore.ValueProvider?
}
extension Dictionary : MobileWorkflowCore.ValueProvider where Key == Swift.String {
  public var content: [Swift.AnyHashable : Swift.Codable] {
    get
  }
  public func fetchValue(for path: Swift.String) -> Any?
  public func fetchProvider(for path: Swift.String) -> MobileWorkflowCore.ValueProvider?
}
public struct AuthRedirectHandler {
  public init(_ handler: @escaping (MobileWorkflowCore.AuthFlowResumer) -> Swift.Void)
}
public protocol AuthProvider {
  func authenticate(completion: @escaping MobileWorkflowCore.Response<MobileWorkflowCore.Credential>) -> MobileWorkflowCore.AuthFlowResumer
}
@_hasMissingDesignatedInitializers public class AuthProviderImplementation : MobileWorkflowCore.AuthProvider {
  public func authenticate(completion: @escaping MobileWorkflowCore.Response<MobileWorkflowCore.Credential>) -> MobileWorkflowCore.AuthFlowResumer
  @objc deinit
}
public protocol AuthFlowResumer : AnyObject {
  func resumeAuth(with url: Foundation.URL) -> Swift.Bool
}
public protocol AuthRedirector : AnyObject {
  var authFlowResumer: MobileWorkflowCore.AuthFlowResumer? { get set }
}
extension AuthRedirector {
  public func authRedirectHandler() -> MobileWorkflowCore.AuthRedirectHandler
  public func handleAuthRedirect(for url: Foundation.URL) -> Swift.Bool
}
extension ResearchKit.ORKFileResult : MobileWorkflowCore.SessionProvider {}
extension MobileWorkflowCore.HTTPMethod : Swift.Equatable {}
extension MobileWorkflowCore.HTTPMethod : Swift.Hashable {}
extension MobileWorkflowCore.HTTPMethod : Swift.RawRepresentable {}
